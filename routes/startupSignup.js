let express = require('express');
let router = express.Router();
let Schema = require('../database/schema');
const nodemailer = require('nodemailer');
let bcrypt = require('bcrypt');
require('dotenv/config');
const saltRounds = 10;

router.post('/',function (req,res) {
    let startupSchema = Schema.startup({
        // Founder Information
        NoCofounder: req.body.NoCofounder,
        FullName: req.body.FirstName + ' ' + req.body.LastName,
        Email: req.body.Email,
        LinkedInUrl: req.body.LinkedInUrl,

        // Startup Information
        CompanyName: req.body.CompanyName,
        StartupStage: req.body.StartupStage,
        StartupCorporated: req.body.StartupCorporated,
        CompanyWebsite: req.body.CompanyWebsite,
        StartupFocusSector: req.body.StartupFocusSector,
        CompanyCity: req.body.CompanyCity,
        AboutCompany: req.body.AboutCompany,
        AmountToRaise: req.body.AmountToRaise,

        // User Information
        UserID: req.body.UserID,
        Password: bcrypt.hashSync(req.body.Password,saltRounds),
        Type: "Startup",
        //Notification
        Notification: []
    });


    // variables used in validation
    let Linkedinurl = req.body.LinkedInUrl;
    let Companyurl = req.body.CompanyWebsite;
    let Firstname = req.body.FirstName;
    let Lastname = req.body.LastName;
    // IMPLEMENTING VALIDATION FOR STARTUP

    req.checkBody('FirstName','Firstname entered is incorrect.').isAlpha();
    req.checkBody('LastName','Lastname entered is incorrect.').isAlpha();

    req.checkBody('Password', 'password must be at least 5 chars long ').isLength({ min: 5 });

    req.checkBody('Password','Password and Confirm Password must be same ').equals(req.body.ConfirmPassword);

    req.checkBody('LinkedInUrl','LinkedIn URL entered is incorrect.').isURL({Linkedinurl});

    if(!!(req.body.CompanyWebsite)) {
        req.checkBody('CompanyWebsite','Company website URL entered is incorrect.').isURL({Companyurl});
    }
    let errors = req.validationErrors();
    // if an error occurs
    if(errors) {
        for(i=0;i<errors.length;i++) {
            console.log(errors[i].msg);
        }
        return res.send(errors);
    }
    else {
        res.send("Your account has been created. Login to use your account.")
    }

    let transporter = nodemailer.createTransport({
        service:"Gmail",
        secure: false, // true for 465, false for other ports
        auth: {
            user: process.env.MAILUSER, // generated ethereal user
            pass: process.env.MAILPASSWORD           // generated ethereal password
        }
    });

// setup email data with unicode symbols
    let mailOptions = {
        from: 'MoneyGust101@gmail.com', // sender address
        to: startupSchema.Email, // list of receivers
        subject:'MoneyGust Autogenerated Mail (do not reply)', // Subject line
        text: 'Thank you for joining MoneyGust.',
        html:  '<b>Thank you for joining MoneyGust.' +
        'We will help you in finding the right investor for you.</b>'
    };
    // send mail with defined transport object
    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            return console.log(error);
        }
        console.log('Message sent: %s', info.messageId);
    // Preview only available when sending through an Ethereal account
    console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));

    // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>
    // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...
    });

    startupSchema.save(function (err,data) {
        if(err) throw err;
    });
});

module.exports = router;